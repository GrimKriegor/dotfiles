#!/bin/bash

# Watch out for docking events
# and run dock-handler accordingly
# GPLv3 - Grim Kriegor <grimkriegor@krutt.org>
# 2019
#
# Usage:
# $ watchdock [interval] [dock display]

check_interval="${1:-5}"
dock_display="${2:-DP1}"
dock_test_script="$HOME/.config/dock-handler/check"

function getDisplays() {
  echo $(xrandr | grep -w "connected" | awk -F'[ +  ]' '{print $1}')
}

function getPowerSources() {
  echo $(ls -1 /sys/class/power_supply)
}

function isLaptop() {
  if [[ \
    $(getDisplays | grep "LVDS\|eDP1") || \
    $(getPowerSources | grep "BAT") \
  ]]; then
    return 0
  fi
  return 1
}

function isDocked() {
  if [[ -f $dock_test_script ]]; then
    if [[ $(bash $dock_test_script) ]]; then
      return 0
    fi
    return 1
  else
    if [[ $(getDisplays | grep -w "${dock_display}") ]]; then
      return 0
    fi
    return 1
  fi
}

function checkState() {
  if isDocked; then
    echo "desktop"
  else
    echo "laptop"
  fi
}

function switchMode() {
  mode="$1"
  echo "Switching to mode: $mode"
  notify-send "watchdock" "Switching to mode: $mode"
  dock-handler "$mode" 2>&1 >/dev/null
}

if ! isLaptop; then
  echo "Not a laptop, gracefully aborting..."
  exit 0
fi

current_state="$(checkState)"
previous_state="$current_state"
dock-handler "$current_state" 2>&1 >/dev/null
echo "Initializing in mode: $current_state"
notify-send "watchdock" "Initializing in mode: $current_state"

while true; do
  current_state="$(checkState)"
  [[ "$current_state" != "$previous_state" ]] && \
    switchMode "$current_state"
  previous_state="$current_state"
  sleep $check_interval
done

