#!/bin/bash
# Copyright (C) 2012 Stefan Breunig <stefan+measure-net-speed@mathphys.fsk.uni-heidelberg.de>
# Copyright (C) 2014 kaueraal
# Copyright (C) 2015 Thiago Perrotta <perrotta dot thiago at poli dot ufrj dot br>

# Copyright (C) 2019 Grim Kriegor <grimkriegor@krutt.org>
# Hacks on top of i3blocks-contrib
# - Calculate bitrates from all available interfaces
# - Colored labels depending on the rate unit

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Get custom IN and OUT labels if provided by command line arguments

while [[ $# -gt 1 ]]; do
    key="$1"
    case "$key" in
        -i|--inlabel)
            INLABEL="$2"
            shift;;
        -o|--outlabel)
            OUTLABEL="$2"
            shift;;
    esac
    shift
done

[[ -z "$INLABEL" ]] && INLABEL="IN "
[[ -z "$OUTLABEL" ]] && OUTLABEL="OUT "

# path to store the old results in
path="/dev/shm/$(basename $0)"

# grabbing data for each adapter.
for device in /sys/class/net/*; do
  [[ $(echo $device | grep 'lo\|vir*\|veth*\|lxc*\|docker*') ]] && continue
  read _rx < "${device}/statistics/rx_bytes"
  read _tx < "${device}/statistics/tx_bytes"
  rx_sum=$(($rx_sum + $_rx))
  tx_sum=$(($tx_sum + $_tx))
done
rx=$rx_sum
tx=$tx_sum

# get time
time=$(date +%s)

# write current data if file does not exist. Do not exit, this will cause
# problems if this file is sourced instead of executed as another process.
if ! [[ -f "${path}" ]]; then
  echo "${time} ${rx} ${tx}" > "${path}"
  chmod 0666 "${path}"
fi

# read previous state and update data storage
read old < "${path}"
echo "${time} ${rx} ${tx}" > "${path}"

# parse old data and calc time passed
old=(${old//;/ })
time_diff=$(( $time - ${old[0]} ))

# sanity check: has a positive amount of time passed
[[ "${time_diff}" -gt 0 ]] || exit

# calc bytes transferred, and their rate in byte/s
rx_diff=$(( $rx - ${old[1]} ))
tx_diff=$(( $tx - ${old[2]} ))
rx_rate=$(( $rx_diff / $time_diff ))
tx_rate=$(( $tx_diff / $time_diff ))

function rateToOutput() {
  rate="$1"
  label="$2"
  if hash bc 2>/dev/null && [[ "$rate" -gt 1048576 ]]; then
    rate_k=$(( $rate >> 10 ))
    value=$(echo "scale=1; $rate_k/1024" | bc)
    unit="M"
    if [[ "$rate_k" -gt 12500 ]];
      then color="#FF0000"
      else color="#00FF00"
    fi
  elif hash bc 2>/dev/null && [[ "$rate" -gt 1024 ]]; then
    value=$(( $rate >> 10 ))
    unit="K"
    color="#666666"
  else
    value="0"
    unit="b"
    color="#666666"
  fi
  echo -n "<span color=\"$color\">$label</span>$value$unit"
}

rateToOutput "$rx_rate" "$INLABEL"
echo -n " "
rateToOutput "$tx_rate" "$OUTLABEL"
echo
